from aiogram import F, Router

import database
import keyboards
import api_requests
from handlers import BotState
from constants import texts, months

router = Router()


@router.callback_query(F.data == 'menu')
async def menu_callback(callback_query, state):
    name = await database.get_name(callback_query.from_user.id)
    await state.clear()
    await callback_query.message.edit_text(text=texts['welcome'][0] + name + texts['welcome'][1],
                                           reply_markup=keyboards.main_menu_markup())


@router.callback_query(F.data == 'account')
async def account_callback(callback_query):
    await callback_query.message.edit_text(text="üíª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=keyboards.account_menu_markup())


@router.callback_query(F.data == 'materials')
async def materials_callback(callback_query):
    await callback_query.message.edit_text(text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=keyboards.return_menu_markup())


@router.callback_query(F.data == 'q_a')
async def q_a_callback(callback_query):
    await callback_query.message.edit_text(text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=keyboards.return_menu_markup())


@router.callback_query(F.data == 'about_alles')
async def about_alles_callback(callback_query):
    await callback_query.message.edit_text(text=texts['about_alles'], reply_markup=keyboards.return_menu_markup())


@router.callback_query(F.data == 'courses')
async def q_a_callback(callback_query):
    await callback_query.message.edit_text(text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=keyboards.return_profile_markup())


@router.callback_query(F.data == 'deadlines')
async def q_a_callback(callback_query):
    await callback_query.message.edit_text(text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=keyboards.return_profile_markup())


@router.callback_query(F.data == 'interests')
async def q_a_callback(callback_query):
    await callback_query.message.edit_text(text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=keyboards.return_profile_markup())


@router.callback_query(F.data == 'about_acc')
async def about_acc_callback(callback_query):
    website_id = await database.get_web_id(callback_query.message.chat.id)
    response = await api_requests.get_user_data(website_id)
    message_text = ""
    
    if response:
        user_data = await response.json()
        message_text = (f"–í–∞—à id: {user_data['tg_chat_id']}\n" +
                        f"–ò–º—è: {user_data['first_name']} {user_data['last_name']}\n" +
                        f"–ü–æ—á—Ç–∞: {user_data['username']}\n" +
                        (user_data['grade'] is not None) * f"–ö–ª–∞—Å—Å: {user_data['grade']}")
    else:
        message_text = texts['server_error']

    await callback_query.message.edit_text(text=message_text, reply_markup=keyboards.return_profile_markup())


@router.callback_query(F.data == 'admin_menu')
async def admin_menu_callback(callback_query, state):
    await state.clear()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    if await database.has_main_access(callback_query.from_user.id):
        await callback_query.message.edit_text(text=texts['welcome_admin'], reply_markup=keyboards.main_admin_menu_markup())
    elif await database.has_admin_access(callback_query.from_user.id):
        await callback_query.message.edit_text(text=texts['welcome_admin'], reply_markup=keyboards.admin_menu_markup())


@router.callback_query(F.data == 'add_user')
async def add_user_callback(callback_query, state):
    await callback_query.message.edit_text(text=texts['add_user_help'], reply_markup=keyboards.return_admin_markup())
    await state.set_state(BotState.add_user)

@router.callback_query(F.data == 'find_user')
async def find_user_callback(callback_query, state):
    await callback_query.message.edit_text(text=texts['find_user_help'], reply_markup=keyboards.return_admin_markup())
    await state.set_state(BotState.find_user)

@router.callback_query(F.data == 'set_role')
async def set_role_callback(callback_query, state):
    await callback_query.message.edit_text(text=texts['set_role_help'], reply_markup=keyboards.return_admin_markup())
    await state.set_state(BotState.set_role)


@router.callback_query(F.data == 'delete_user')
async def delete_user_callback(callback_query, state):
    await callback_query.message.edit_text(text=texts['delete_user_help'], reply_markup=keyboards.delete_user_markup())


@router.callback_query(F.data == 'delete_user_confirmed')
async def delete_user_confirmed_callback(callback_query, state):
    tg_chat_id = (await state.get_data())['find_user']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await database.find_user(tg_chat_id):
        await callback_query.message.edit_text(texts['user_404'], reply_markup=keyboards.return_admin_markup())
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
    await database.delete_user(tg_chat_id)
    await callback_query.message.edit_text(texts['user_deleted'], reply_markup=keyboards.return_admin_markup())
    await state.clear()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@router.callback_query(F.data == 'add_event')
async def add_event_callback(callback_query, state):
    await callback_query.message.edit_text(text=texts['enter_event_title'], reply_markup=keyboards.return_admin_markup())
    await state.set_state(BotState.event_title)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤ –≤ –±–¥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –Ω–∏–º–∏
@router.callback_query(F.data == 'create_event_and_tags')
async def add_tags_again_callback(callback_query, state):
    new_tags = (await state.get_data())['event_add_tags'][0]
    entered_tags = (await state.get_data())['event_add_tags'][1]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –≤ –±–¥
    for tag in new_tags:
        await database.add_tag(tag)

    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ
    data = await state.get_data()
    event_id = await database.add_general_event(data['event_title'], data['event_description'], data['event_time'])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Ç–µ–≥–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π –≤ –ë–î
    for tag in entered_tags:
        await database.create_tag_event(event_id, tag)

    await callback_query.message.edit_text(text=texts['event_created'], reply_markup=keyboards.return_admin_markup())
    await state.clear()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —Å–æ–±—ã—Ç–∏—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
@router.callback_query(F.data == 'add_tags_again')
async def add_tags_again_callback(callback_query, state):
    await callback_query.message.edit_text(text=texts['enter_tags'], reply_markup=keyboards.return_admin_markup())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data == 'menu_add_tags')
async def add_tags_again_callback(callback_query, state):
    await callback_query.message.edit_text(text=texts['menu_add_tags'], reply_markup=keyboards.return_admin_markup())
    await state.set_state(BotState.menu_add_tags)


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data == 'menu_delete_tags')
async def delete_tags_again_callback(callback_query, state):
    await callback_query.message.edit_text(text=texts['menu_delete_tags'], reply_markup=keyboards.return_admin_markup())
    await state.set_state(BotState.menu_delete_tags)


# –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
@router.callback_query(F.data == 'print_tags')
async def print_tags_callback(callback_query):
    tags = await database.get_tags_data()
    await callback_query.message.edit_text(text=(texts['tags_result'] + ', '.join(tag['name'] for tag in tags)),
                                           reply_markup=keyboards.return_admin_markup())


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
@router.callback_query(F.data[:11] == 'event_data_')
async def event_data_callback(callback_query):
    event_id = int(callback_query.data.split('_')[-1])
    event = await database.get_event_data(event_id)

    a_day = event['added_at'].strftime("%d")
    a_month = months[event['added_at'].strftime("%m")]
    a_time = event['added_at'].strftime("%H:%M")
    s_day = event['starts_at'].strftime("%d")
    s_month = months[event['starts_at'].strftime("%m")]
    s_time = event['starts_at'].strftime("%H:%M")
    tags = await database.get_tags_of_event(event_id)

    message_text = (f"ID: ({event['id']})\n" +
                    f"–ù–∞—á–∞–ª–æ {s_day} {s_month} –≤ {s_time}\n" +
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ {a_day} {a_month} –≤ {a_time}\n" +
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n" +
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n" +
                    "–¢–µ–≥–∏: " + ', '.join(tag['name'] for tag in tags))

    await callback_query.message.edit_text(text=message_text,
                                           reply_markup=keyboards.event_markup(event_id))


# –í—ã–≤–æ–¥ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
@router.callback_query(F.data[:13] == 'print_events_')
async def print_events_callback(callback_query):
    row_number = int(callback_query.data.split('_')[-1])
    await callback_query.message.edit_text(text=texts['events_printed'],
                                           reply_markup=await keyboards.print_events_markup(row_number))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–±—ã—Ç–∏—è
@router.callback_query(F.data[:13] == 'delete_event_')
async def event_data_callback(callback_query):
    event_id = int(callback_query.data.split('_')[-1])
    event = await database.get_event_data(event_id)

    day = event['starts_at'].strftime("%d")
    month = months[event['starts_at'].strftime("%m")]
    time = event['starts_at'].strftime("%H:%M")
    message_text = texts['confirm_del_event'] + f"({event['id']}) {day} {month} {time} {event['title']}"

    await callback_query.message.edit_text(text=message_text,
                                           reply_markup=keyboards.event_delete_markup(event_id))


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@router.callback_query(F.data[:14] == 'event_deleted_')
async def event_data_callback(callback_query):
    event_id = int(callback_query.data.split('_')[-1])
    await database.delete_event(event_id)
    await callback_query.message.edit_text(text=texts['event_deleted'],
                                           reply_markup=keyboards.return_events_markup())


# –í—ã–≤–æ–¥–∏ –º–µ–Ω—é —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
@router.callback_query(F.data[:16] == 'print_questions_')
async def print_questions_callback(callback_query):
    page_num = int(callback_query.data.split('_')[-1])
    await callback_query.message.edit_text(text=texts['questions_printed'],
                                           reply_markup=await keyboards.print_questions_markup(page_num))


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ø—Ä–æ—Å–µ
@router.callback_query(F.data[:14] == 'question_data_')
async def question_data_callback(callback_query):
    question_id = int(callback_query.data.split('_')[-1])
    response = await api_requests.question_data(question_id)

    if not response:
        await callback_query.message.edit_text(text=texts['server_error'],
                                               reply_markup=keyboards.return_admin_markup())
        return

    question = await response.json()
    message_text = (texts['question_data'] +
                    (f"ID: ({question['id']})\n" +
                     f"–ò–º—è: {question['name']}\n" +
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {question['phone_number']}\n" +
                     f"–í–æ–ø—Ä–æ—Å: {question['text_field']}\n\n"))

    await callback_query.message.edit_text(text=message_text, reply_markup=keyboards.question_markup(question_id))


# –†–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data[:15] == 'solve_question_')
async def question_data_callback(callback_query):
    question_id = int(callback_query.data.split('_')[-1])
    response = await api_requests.question_data(question_id)

    if not response:
        await callback_query.message.edit_text(text=texts['server_error'],
                                               reply_markup=keyboards.return_admin_markup())
        return

    question = await response.json()
    message_text = (texts['confirm_solve_quest'] +
                    (f"ID: ({question['id']})\n" +
                     f"–ò–º—è: {question['name']}\n" +
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {question['phone_number']}\n" +
                     f"–í–æ–ø—Ä–æ—Å: {question['text_field']}\n\n"))

    await callback_query.message.edit_text(text=message_text, reply_markup=keyboards.question_solve_markup(question_id))


# –í–æ–ø—Ä–æ—Å —Ä–µ—à—ë–Ω
@router.callback_query(F.data[:16] == 'question_solved_')
async def event_data_callback(callback_query):
    question_id = int(callback_query.data.split('_')[-1])
    await api_requests.questionForm_solved(question_id)
    await callback_query.message.edit_text(text=texts['question_solved'],
                                           reply_markup=keyboards.return_questions_markup())
